{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Mad Migration takes the stress out of database relocation! We are a powerful tool designed to streamline the migration process between various database servers,  currently supporting transfers from MySQL to PostgreSQL and vice versa</p> <p>Whether you're looking to upgrade your database infrastructure, consolidate multiple databases, or simply switch platforms, Mad Migration is here to help.</p> <p>Our core features include:</p> <ul> <li> <p>Seamless data transfer: Move your data efficiently and securely between databases with minimal downtime. Data type casting: No need to worry about data type mismatches. Mad Migration intelligently converts data types during migration to ensure compatibility in your new database.</p> </li> <li> <p>User-friendly interface: Our intuitive interface makes migrating your database a breeze. Simply configure your source and target databases, customize data type casting options, and watch Mad Migration handle the rest.</p> </li> </ul> <p>Mad Migration is perfect for:</p> <ul> <li>Developers and IT professionals looking for a smooth and efficient database migration solution.</li> <li>Businesses seeking to consolidate or upgrade their database infrastructure.</li> <li>Anyone who needs to transfer data between different database platforms.</li> </ul> <p>Full code can be found on GitHub Repo.</p>"},{"location":"#development","title":"Development","text":"<p>Currently under the development. Soon documentation will be updated.</p>"},{"location":"example/","title":"Full Example","text":""},{"location":"example/#mad-migration","title":"Mad Migration","text":""},{"location":"example/#example","title":"Example","text":""},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>After installation you should define YAML file where configuration will be taken in order to apply data to target database. Yaml file with list and dictionaries may contain following structures:</p>"},{"location":"getting-started/#example","title":"Example:","text":"<p>We have <code>users</code> database. We want to migrate it to <code>persons</code> database.</p> <p></p>"},{"location":"getting-started/#lets-create-yaml-file-for-our-migration-tool","title":"Lets create yaml file for our migration tool.","text":"<pre><code>version: 0.1.6\nConfigs:\n  - SourceConfig:\n       dbURI: \"postgres://admin:admin@127.0.0.1/oldDB\"\n  - DestinationConfig:\n       dbURI: \"mysql://admin:admin@127.0.0.1/newDB\"\n\nmigrationTables:\n  - migrationTable:\n      SourceTable:\n        name: users\n      DestinationTable:\n        name: persons\n        create: True\n\n      MigrationColumns:\n        - sourceColumn:\n            name: id\n          destinationColumn:\n            name: id\n            options:\n              type_cast: bigint\n              primary_key: true\n              autoincrement: true\n\n        - sourceColumn:\n            name: name\n          destinationColumn:\n            name: fname\n            options:\n              type_cast: varchar\n              length: 32\n\n        - sourceColumn:\n            name: surname\n          destinationColumn:\n            name: lname\n            options:\n              type_cast: varchar\n              length: 32\n              index: true\n\n        - sourceColumn:\n            name: age\n          destinationColumn:\n            name: age\n            options:\n              type_cast: int\n\n        - sourceColumn:\n            name: createdAT\n          destinationColumn:\n            name: created_at\n            options:\n              type_cast: datetime\n\n        - sourceColumn:\n            name: updatedAT\n          destinationColumn:\n            name: updated_at\n            options:\n              type_cast: datetime\n\n</code></pre>"},{"location":"getting-started/#configs-section","title":"<code>Configs section</code>","text":"<ul> <li><code>SourceConfig</code> set the source database configurations<ul> <li><code>dbURI</code> source database URI </li> </ul> </li> <li><code>DestinationConfig</code> set the destination database configurations<ul> <li><code>dbURI</code> destination database URI </li> </ul> </li> </ul> <pre><code>Configs:\n  - SourceConfig:\n       dbURI: \"postgres://root:admin@127.0.0.1/oldDB\"  # set source database uri\n  - DestinationConfig:\n       dbURI: \"mysql://root:admin@127.0.0.1/newDB\"  # set destination database uri\n</code></pre>"},{"location":"getting-started/#migrationtables-section","title":"migrationTables section","text":"<ul> <li> <p><code>migrationTables</code> in this configuration, you will write the source of the table that you have to migrate and the destination tables that will migrate the data. </p> </li> <li> <p><code>migrationTable</code> specify the source and destination table name</p> <ul> <li><code>SourceTable</code> information about source table<ul> <li><code>name</code> source table name</li> </ul> </li> <li><code>DestinationTable</code> information about destination table<ul> <li><code>name</code> destination table name</li> <li><code>create</code> bool value. This parameter tells the program whether it should create a table or not. (<code>default false</code>)</li> </ul> </li> </ul> </li> </ul> <pre><code>\nmigrationTables:\n  - migrationTable:\n      SourceTable:\n        name: users\n      DestinationTable:\n        name: persons\n        create: True\n</code></pre>"},{"location":"getting-started/#migrationcolumns-section","title":"MigrationColumns section","text":"<ul> <li><code>MigrationColumns</code> specify source and destination column</li> <li><code>sourceColumn</code>  information about source column<ul> <li><code>name</code> source column name</li> </ul> </li> <li><code>destinationColumn</code> information about destination column<ul> <li><code>name</code> destination column name</li> <li><code>options</code> column options</li> <li><code>type_cast</code> destination column type name [<code>varchar</code>, <code>integer</code>, <code>etc</code>]. When we convert data we use this parameter</li> </ul> </li> </ul> <pre><code>MigrationColumns:\n  - sourceColumn:\n      name: id\n    destinationColumn:\n      name: id\n      options:\n        type_cast: bigint\n        primary_key: true\n        autoincrement: true\n</code></pre> <p>If you want to create a foreign key you can specify it in the column parameters</p> <pre><code>- sourceColumn:\n    name: USERID\n  destinationColumn:\n    name: user_id\n    options:\n      type_cast: uuid\n      foreign_key:\n        table_name: users\n        column_name: id\n        ondelete: CASCADE\n</code></pre>"},{"location":"getting-started/#you-can-split-your-yaml-files","title":"You can split your .yaml files","text":"<p>To split yaml files you must create <code>main.yaml</code> file and import other files into <code>main.yaml</code> file.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#install-madmigration","title":"Install MadMigration","text":"<p>The first step is to install MadMigration.</p> <pre><code>$ pip install madmigration\n\n---&gt; 100%\n</code></pre>"},{"location":"license/","title":"The License","text":""}]}